{
    "collab_server" : "",
    "contents" : "#\n# Bootstrap and permutations\n#\n#\n\n\n# bootstrapping\n# read the data bootstrap.data.csv\n\nwkdr <- setwd\nlist.files()\nd <- read.csv(\" bootstrap.data.csv\", stringsAsFactors = FALSE)\n\n# --- a\n# load the data and plot the 'value' parameter.\n\nplot(d$value)\nrange(d$value)\nbr.t <- seq(-4,10, 0.5)\nhist(d$value, breaks = br.t)\n# Anything odd?\n\n# different distributions, cannot use a two sample t test\n\n# --- b\n# use bootstrapping to get the sample distribution of the mean difference between\n# the two groups. Retain the same sample size as the original sample for each group.\n# do this 1000 times\nstr(d)\ntable(d$group)\n\n?sample\n\nn.A <- table(d$group)[1]\nn.B <- table(d$group)[2]\n\n#resample from each group using itts origional sample size\nsample.A <- sample(d$value[d$group == \"A\"], n.A, replace = TRUE)\nsample.B <- sample(d$value[d$group == \"B\"], n.B, replace = TRUE)\ndelta.mean <- mean(sample.B) - mean(sample.A)\n\niterations <- 1000\nstore.means <- rep(NA, 1000)\n              \nfor(i in 1:iterations) {\n  print(i) #adding this prints as it goes, track where error are\n  sample.A <- sample(d$value[d$group == \"A\"], n.A, replace = TRUE)\n  sample.B <- sample(d$value[d$group == \"B\"], n.B, replace = TRUE)\n  store.means[i] <- mean(sample.B) - mean(sample.A)\n}\n\n# --- c \n# plot the sample distribution and get the standard error\n\nhist(store.means)\n#standard error is the standard deviation of the sampling distribution\nst.dv <- sd(store.means)\n\nmean.difference <- mean(d$value[d$group == \"A\"]) - mean(d$value[d$group == \"B\"])\n\n#8.879859 with a SE of 0.6019711\n\n\n# ---- permutation test ----\n# We have two groups, A and B and we have data along the wavelength spectrum, starting from 1 nm\n# till 201 nm.\n# we want to know if the two sets of curves are different from another.\n# to do this we will use  apermutatin test approach\n\n# --- a\n# load the data file permutation.data.csv\nlist.files()\np <- read.csv(\" permutation.data.csv\", stringsAsFactors = FALSE)\n# plot the data and give the two groups a different colour\nhead(d)\ntable(d$group)\n\nps <- p[,1:5]\n\nA <- p[p$group == \"A\"]\nB <- p[p$group == \"B\"]\n\nx.values <- c(1:(ncol(p)-1))\nxlim.t <- c(1,(ncol(p)-1))\nylim.t <- range(p[,-1]) #tells R to take the entire data set except 1st collumn\n\ngt.t <- factor(p$group)\nlevels(gt.t) <- c(\"red\", \"green\")\n\nplot(NA, xlim = xlim.t, ylim = ylim.t) #create empty plotting area\nfor(i in 1:nrow(p)) lines(x.values, p[i,-1], col = gt.t[i])\n\n\n# Do the groups look different?\n\n\n# --- b \n# we are now for each wavelength reshuffle the groups (the permutation stage)\n# perform a t test and store the t value( this will be used to get our test statistic)\n# do this first for one wavelength!\n\n#take the difference between the groups for each collumn\n#origional data\nA <- p[p$group == \"A\",]\nB <- p[p$group == \"B\",]\n\nmean.stor <- rep(NA, ncol(p)-1)\nfor(i in 2:ncol(p)) {\n  mean.stor[i-1] <- (mean(B[,i]) - mean(A[,i]))^2\n}\nreal.test.stat <- sum(mean.stor)\n\n#permutation to get null\nperm.data <- p\n\n#this shuffles characters in this collumn\niter <- 1000\nstorage.perm <- rep(NA, iter)\nfor(k in 1:1000){\n  perm.data <- p\n  \n  perm.data$group <- sample(p$group, length(p$group), replace = FALSE) #false because we want the same sample sizes of A and B\n\n  A <- perm.data[perm.data$group == \"A\",]\n  B <- perm.data[perm.data$group == \"B\",]\n\n  mean.stor <- rep(NA, ncol(p)-1)\n  for(i in 2:ncol(p)) {\n    mean.stor[i-1] <- (mean(B[,i]) - mean(A[,i]))^2 #this is the test\n  }\n  #store the squared difference of the means \n  storage.perm[k] <- sum(mean.stor)\n}\nreal.test.stat <- sum(mean.stor)\ntest <- sum(storage.perm)\n\nhist(storage.perm)\n#find the p value\n2*(length(storage.perm[storage.perm > real.test.stat]) + 1)/iter\n\n # --- c\n# expand the approach to add a loop, storing the t value for the difference between the (reshuffled)\n# groups at a wavelength.\n# at the and, sum all of the t values. This is our own, invented test statistic and \n# we have the first value for our sampling distribution of our test statistic\n# let's call it SumT\n\n# --- d\n# we want to do the above 1000 times! Nest the above permutatin into a for loop.\n\n\n\n\n\n\n\n\n\n\n# ----------- end --------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nwd <- getwd()\np.d14 <- paste(wd, \"/day 14/\", sep = \"\")\n\n\n# generate data sets\nn.1 <- c(15, 3, 8)\nA1 <- runif(n.1[1], 6, 10)\nB1 <- c(rnorm(n.1[2], 2, 0.5), rnorm(n.1[3], -2, 1))\n\ngroup <- rep(c(\"A\", \"B\", \"B\"), n.1)\ntt <- cbind(group,c(A1, B1)  )\ncolnames(tt) <- c(\"group\", \"value\")\nwrite.csv(tt, paste(p.d14, \"bootstrap.data.csv\"), row.names = FALSE)\n\nhist(c(A1, B1)  )\n\n\n# permutation\n\n# gaussian\nf.gaussian <- function(mean, sd, range){\n  #range <- seq(-1, 5, 0.2)\n  #mean <- 1\n  #sd <- 0.2 \n  val <- 1/(sd * sqrt(2 * pi)) * exp(-(range - mean)^2/(2 * sd^2))\n  return(val)\n}\n\nrange <- seq(0, 20, 0.1)\nv <- f.gaussian(10, 50, range)\nplot(v)\n\nm <- c(9.4, 10)\nsd.m <- 0.5\nsd <- c(9, 10)\nsd2.m <- 0.2\nn.2 <- c(12,13)\nnames <- rep(c(\"A\", \"B\"), n.2)\nstorage <- matrix(NA, nrow = sum(n.2), ncol = length(range))\nmeans <- c( rnorm(n.2[1], mean = m[1], sd = sd.m), rnorm(n.2[2], mean = m[2], sd = sd.m))\nsds <- c( rnorm(n.2[1], mean = sd[1], sd = sd2.m), rnorm(n.2[2], mean = sd[2], sd = sd2.m))\n\nfor(i in 1:sum(n.2)){\n  #i <- 3\n  storage[i,] <- f.gaussian(means[i], sds[i], range)\n  \n}\n\npermutation.data <- data.frame(cbind(names, storage))\nhead(permutation.data)\ncolnames(permutation.data) <- c(\"group\", c(1:201))\nwrite.csv(permutation.data, paste(p.d14, \"permutation.data.csv\"), row.names = FALSE)\n\n\n\ngroups <- permutation.data[,1] \ndata <- as.numeric(permutation.data[,-1] )\nstr(data)\nylim.t <- range(storage)\nxlim.t <- c(1, ncol(storage))\n\nplot(NA, xlim = xlim.t, ylim = ylim.t)\nfor(i in 1:ncol(storage)) lines(c(1:ncol(storage)), storage[i,])\n",
    "created" : 1481860132953.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1893829385",
    "id" : "21BCAB80",
    "lastKnownWriteTime" : 1481847512,
    "last_content_update" : 1481847512,
    "path" : "~/Desktop/RLibrary/resample.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}